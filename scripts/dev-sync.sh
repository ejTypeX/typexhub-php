#!/bin/bash

# ==================== SCRIPT DE DESENVOLVIMENTO H√çBRIDO ====================

echo "üîÑ TypeX Hub - Sincroniza√ß√£o de Banco de Desenvolvimento"
echo "======================================================="

# Carrega vari√°veis do .env se existir
if [ -f .env ]; then
    export $(cat .env | grep -v '^#' | xargs)
else
    echo "‚ö†Ô∏è  Arquivo .env n√£o encontrado. Usando valores padr√£o..."
    DB_USER="root"
    DB_PASSWORD="root123"
    DB_NAME="typexhub"
fi

# Fun√ß√£o para extrair estrutura atual do banco
extrair_estrutura() {
    echo "üìä Extraindo estrutura atual do banco..."
    
    docker exec typexhub-db mysqldump \
        -u${DB_USER} -p${DB_PASSWORD} \
        --no-data \
        --routines \
        --triggers \
        --single-transaction \
        --add-drop-table \
        --add-locks \
        --create-options \
        ${DB_NAME} > temp_estrutura_atual.sql
    
    if [ $? -eq 0 ]; then
        echo "‚úÖ Estrutura atual extra√≠da para temp_estrutura_atual.sql"
    else
        echo "‚ùå Erro ao extrair estrutura do banco"
        exit 1
    fi
}

extrair_estrutura_migrations() {
    echo "üìã Recriando estrutura das migrations..."
    
    docker exec typexhub-db mysql -u${DB_USER} -p${DB_PASSWORD} -e "CREATE DATABASE IF NOT EXISTS temp_migrations;"
    
    for migration in database/migrations/*.sql; do
        if [ -f "$migration" ]; then
            echo "  üìÑ Aplicando: $(basename $migration)"
            docker exec -i typexhub-db mysql -u${DB_USER} -p${DB_PASSWORD} temp_migrations < "$migration"
        fi
    done
    
    docker exec typexhub-db mysqldump \
        -u${DB_USER} -p${DB_PASSWORD} \
        --no-data \
        --routines \
        --triggers \
        --single-transaction \
        --add-drop-table \
        --add-locks \
        --create-options \
        temp_migrations > temp_estrutura_migrations.sql
    
    docker exec typexhub-db mysql -u${DB_USER} -p${DB_PASSWORD} -e "DROP DATABASE temp_migrations;"
    
    echo "‚úÖ Estrutura das migrations extra√≠da para temp_estrutura_migrations.sql"
}

comparar_estruturas() {
    echo "üîç Comparando estruturas para detectar mudan√ßas..."
    
    if [ ! -f "temp_estrutura_atual.sql" ]; then
        echo "‚ùå Arquivo temp_estrutura_atual.sql n√£o encontrado"
        exit 1
    fi
    
    if [ ! -f "temp_estrutura_migrations.sql" ]; then
        echo "‚ùå Arquivo temp_estrutura_migrations.sql n√£o encontrado"
        exit 1
    fi
    
    diff temp_estrutura_migrations.sql temp_estrutura_atual.sql > temp_diferencas.txt
    
    if [ -s temp_diferencas.txt ]; then
        echo "‚ö†Ô∏è  MUDAN√áAS DETECTADAS!"
        echo "üìÑ Diferen√ßas encontradas em temp_diferencas.txt"
        echo ""
        echo "üìã Resumo das mudan√ßas:"
        grep -E "CREATE TABLE|ALTER TABLE|DROP TABLE|ADD COLUMN|DROP COLUMN" temp_diferencas.txt | head -10
        return 0
    else
        echo "‚úÖ Nenhuma mudan√ßa detectada na estrutura"
        return 1
    fi
}

gerar_migration_automatica() {
    echo "ü§ñ Gerando migration autom√°tica baseada nas mudan√ßas..."
    
    ULTIMO_NUM=$(ls database/migrations/ | grep -o '^[0-9]*' | sort -n | tail -1 2>/dev/null || echo "000")
    PROXIMO_NUM=$(printf "%03d" $((ULTIMO_NUM + 1)))
    
    read -p "üìã Nome da migration (ex: adicionar_tabela_produtos): " NOME_MIGRATION
    
    ARQUIVO_MIGRATION="database/migrations/${PROXIMO_NUM}_${NOME_MIGRATION}.sql"
    
    echo "ÔøΩ Analisando mudan√ßas para gerar SQL..."
    
    cat > "$ARQUIVO_MIGRATION" << EOF
-- ==================== MIGRATION ${PROXIMO_NUM}: $(echo $NOME_MIGRATION | tr '_' ' ' | tr '[:lower:]' '[:upper:]') ====================
-- Data: $(date +%Y-%m-%d)
-- Autor: $USER
-- Descri√ß√£o: Migration gerada automaticamente baseada nas mudan√ßas detectadas

EOF
    
    echo "-- üìÑ Mudan√ßas detectadas automaticamente:" >> "$ARQUIVO_MIGRATION"
    echo "" >> "$ARQUIVO_MIGRATION"
    
    grep -A 20 "^> CREATE TABLE" temp_diferencas.txt | grep -v "^--" | sed 's/^> //' >> "$ARQUIVO_MIGRATION"
    
    grep "^> ALTER TABLE" temp_diferencas.txt | sed 's/^> //' >> "$ARQUIVO_MIGRATION"
    
    cat >> "$ARQUIVO_MIGRATION" << EOF

-- ‚ö†Ô∏è  ATEN√á√ÉO: Migration gerada automaticamente!
-- ‚úèÔ∏è  Revise e edite conforme necess√°rio antes de aplicar
-- üîç Verifique o arquivo temp_diferencas.txt para mais detalhes

-- Atualiza vers√£o do banco
UPDATE configuracoes SET valor = '${PROXIMO_NUM}' WHERE chave = 'versao_db';
EOF

    echo "‚úÖ Migration autom√°tica criada: $ARQUIVO_MIGRATION"
    echo "‚ö†Ô∏è  IMPORTANTE: Revise o arquivo antes de aplicar!"
    
    echo ""
    echo "üìÑ Conte√∫do da migration gerada:"
    echo "================================"
    cat "$ARQUIVO_MIGRATION"
}

criar_migration_manual() {
    echo "üìù Criando nova migration manual..."
    
    ULTIMO_NUM=$(ls database/migrations/ | grep -o '^[0-9]*' | sort -n | tail -1 2>/dev/null || echo "000")
    PROXIMO_NUM=$(printf "%03d" $((ULTIMO_NUM + 1)))
    
    read -p "üìã Nome da migration (ex: adicionar_tabela_usuarios): " NOME_MIGRATION
    
    ARQUIVO_MIGRATION="database/migrations/${PROXIMO_NUM}_${NOME_MIGRATION}.sql"
    
    cat > "$ARQUIVO_MIGRATION" << EOF
-- ==================== MIGRATION ${PROXIMO_NUM}: $(echo $NOME_MIGRATION | tr '_' ' ' | tr '[:lower:]' '[:upper:]') ====================
-- Data: $(date +%Y-%m-%d)
-- Autor: $USER
-- Descri√ß√£o: Adicione aqui a descri√ß√£o da migration

-- Suas mudan√ßas aqui
-- Exemplo:
-- CREATE TABLE IF NOT EXISTS nova_tabela (
--     id INT AUTO_INCREMENT PRIMARY KEY,
--     nome VARCHAR(255) NOT NULL,
--     created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
-- );

-- Atualiza vers√£o do banco
UPDATE configuracoes SET valor = '${PROXIMO_NUM}' WHERE chave = 'versao_db';
EOF

    echo "‚úÖ Migration manual criada: $ARQUIVO_MIGRATION"
    echo "‚úèÔ∏è  Edite o arquivo e adicione suas mudan√ßas SQL"
}

limpar_temp() {
    echo "üßπ Limpando arquivos tempor√°rios..."
    rm -f temp_estrutura_atual.sql temp_estrutura_migrations.sql temp_diferencas.txt
    echo "‚úÖ Arquivos tempor√°rios removidos"
}

case "$1" in
    "extrair")
        extrair_estrutura
        ;;
    "comparar")
        extrair_estrutura
        extrair_estrutura_migrations
        comparar_estruturas
        ;;
    "auto")
        extrair_estrutura
        extrair_estrutura_migrations
        if comparar_estruturas; then
            gerar_migration_automatica
        else
            echo "‚ÑπÔ∏è  Nenhuma mudan√ßa detectada para gerar migration"
        fi
        limpar_temp
        ;;
    "manual")
        criar_migration_manual
        ;;
    "sync")
        echo "üîÑ Sincroniza√ß√£o completa..."
        extrair_estrutura
        extrair_estrutura_migrations
        if comparar_estruturas; then
            echo ""
            read -p "ü§ñ Gerar migration autom√°tica? (s/n): " RESPOSTA
            if [[ $RESPOSTA =~ ^[Ss]$ ]]; then
                gerar_migration_automatica
            else
                echo "üí° Use './dev-sync.sh manual' para criar migration manual"
            fi
        fi
        limpar_temp
        ;;
    "clean")
        limpar_temp
        ;;
    *)
        echo "üí° Uso: $0 {extrair|comparar|auto|manual|sync|clean}"
        echo ""
        echo "üìã Comandos dispon√≠veis:"
        echo "  extrair  - Extrai estrutura atual do banco"
        echo "  comparar - Compara estrutura atual vs migrations"
        echo "  auto     - Gera migration autom√°tica das mudan√ßas"
        echo "  manual   - Cria migration manual vazia"
        echo "  sync     - Sincroniza√ß√£o completa (recomendado)"
        echo "  clean    - Remove arquivos tempor√°rios"
        echo ""
        echo "üöÄ Workflow recomendado:"
        echo "  1. Fa√ßa mudan√ßas no phpMyAdmin"
        echo "  2. Execute: ./dev-sync.sh sync"
        echo "  3. Revise a migration gerada"
        echo "  4. Commit: git add database/migrations/ && git commit"
        ;;
esac